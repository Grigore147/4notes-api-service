services:
  redpanda:
    container_name: redpanda
    image: docker.redpanda.com/redpandadata/redpanda:v24.2.21
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      - --smp 1
      - --default-log-level=info
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    volumes:
      - redpanda:/var/lib/redpanda/data
    networks:
      - 4notes-network

  redpanda-console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v3.0.0
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          # schemaRegistry:
          #   enabled: true
          #   urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
    ports:
      - 127.0.0.1:9090:8080
    depends_on:
      - redpanda
    networks:
      - 4notes-network

volumes:
  redpanda: null

networks:
  4notes-network:
    external: true


  # redpanda-console:
  #   image: redpandadata/console:v3.0.0
  #   hostname: redpanda-console
  #   container_name: redpanda-console
  #   depends_on:
  #     - broker
  #   ports:
  #     - "127.0.0.1:9090:8080"
  #   environment:
  #     # REDPANDA_BROKER_URL: 'broker:29092'
  #     # REDPANDA_CONSOLE_PORT: 9090
  #     # REDPANDA_CONSOLE_HOST: redpanda-console
  #     KAFKA_BROKERS: 'broker:29092'
  #   networks:
  #     - 4notes-network

  # broker:
  #   image: confluentinc/cp-kafka:7.9.0
  #   hostname: broker
  #   container_name: broker
  #   ports:
  #     - "9092:9092"
  #     - "9101:9101"
  #   environment:
  #     KAFKA_NODE_ID: 1
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
  #     KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_JMX_PORT: 9101
  #     KAFKA_JMX_HOSTNAME: localhost
  #     KAFKA_PROCESS_ROLES: 'broker,controller'
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
  #     KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
  #     KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
  #     KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
  #     KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
  #     # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid"
  #     # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
  #     CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
  #   networks:
  #     - 4notes-network

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:7.9.0
  #   hostname: schema-registry
  #   container_name: schema-registry
  #   depends_on:
  #     - broker
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
  #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
  #   networks:
  #     - 4notes-network

  # connect:
  #   image: cnfldemos/kafka-connect-datagen:0.6.4-7.6.0
  #   hostname: connect
  #   container_name: connect
  #   depends_on:
  #     - broker
  #     - schema-registry
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
  #     CONNECT_REST_ADVERTISED_HOST_NAME: connect
  #     CONNECT_GROUP_ID: compose-connect-group
  #     CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
  #     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
  #     CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
  #     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
  #     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
  #     CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
  #     CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #     CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
  #   networks:
  #     - 4notes-network

  # ksqldb-server:
  #   image: confluentinc/cp-ksqldb-server:7.9.0
  #   hostname: ksqldb-server
  #   container_name: ksqldb-server
  #   depends_on:
  #     - broker
  #     - connect
  #   ports:
  #     - "8088:8088"
  #   environment:
  #     KSQL_CONFIG_DIR: "/etc/ksql"
  #     KSQL_BOOTSTRAP_SERVERS: "broker:29092"
  #     KSQL_HOST_NAME: ksqldb-server
  #     KSQL_LISTENERS: "http://0.0.0.0:8088"
  #     KSQL_CACHE_MAX_BYTES_BUFFERING: 0
  #     KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
  #     KSQL_KSQL_CONNECT_URL: "http://connect:8083"
  #     KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
  #     KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
  #     KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
  #   networks:
  #     - 4notes-network

  # ksqldb-cli:
  #   image: confluentinc/cp-ksqldb-cli:7.9.0
  #   container_name: ksqldb-cli
  #   depends_on:
  #     - broker
  #     - connect
  #     - ksqldb-server
  #   entrypoint: /bin/sh
  #   tty: true
  #   networks:
  #     - 4notes-network

  # ksql-datagen:
  #   image: confluentinc/ksqldb-examples:7.9.0
  #   hostname: ksql-datagen
  #   container_name: ksql-datagen
  #   depends_on:
  #     - ksqldb-server
  #     - broker
  #     - schema-registry
  #     - connect
  #   command: "bash -c 'echo Waiting for Kafka to be ready... && \
  #                      cub kafka-ready -b broker:29092 1 40 && \
  #                      echo Waiting for Confluent Schema Registry to be ready... && \
  #                      cub sr-ready schema-registry 8081 40 && \
  #                      echo Waiting a few seconds for topic creation to finish... && \
  #                      sleep 11 && \
  #                      tail -f /dev/null'"
  #   environment:
  #     KSQL_CONFIG_DIR: "/etc/ksql"
  #     STREAMS_BOOTSTRAP_SERVERS: broker:29092
  #     STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
  #     STREAMS_SCHEMA_REGISTRY_PORT: 8081
  #   networks:
  #     - 4notes-network

  # rest-proxy:
  #   image: confluentinc/cp-kafka-rest:7.9.0
  #   depends_on:
  #     - broker
  #     - schema-registry
  #   ports:
  #     - 8082:8082
  #   hostname: rest-proxy
  #   container_name: rest-proxy
  #   environment:
  #     KAFKA_REST_HOST_NAME: rest-proxy
  #     KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
  #     KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
  #     KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
  #   networks:
  #     - 4notes-network

  # flink-sql-client:
  #   image: cnfldemos/flink-sql-client-kafka:1.19.1-scala_2.12-java17
  #   depends_on:
  #     - flink-jobmanager
  #   hostname: flink-sql-client
  #   container_name: flink-sql-client
  #   environment:
  #     FLINK_JOBMANAGER_HOST: flink-jobmanager
  #   networks:
  #     - 4notes-network

  # flink-jobmanager:
  #   image: cnfldemos/flink-kafka:1.19.1-scala_2.12-java17
  #   hostname: flink-jobmanager
  #   container_name: flink-jobmanager
  #   ports:
  #   - 9081:9081
  #   command: jobmanager
  #   environment:
  #   - |
  #     FLINK_PROPERTIES=
  #     jobmanager.rpc.address: flink-jobmanager
  #     rest.bind-port: 9081
  #   networks:
  #     - 4notes-network

  # flink-taskmanager:
  #   image: cnfldemos/flink-kafka:1.19.1-scala_2.12-java17
  #   hostname: flink-taskmanager
  #   container_name: flink-taskmanager
  #   depends_on:
  #   - flink-jobmanager
  #   command: taskmanager
  #   scale: 1
  #   environment:
  #   - |
  #     FLINK_PROPERTIES=
  #     jobmanager.rpc.address: flink-jobmanager
  #     taskmanager.numberOfTaskSlots: 10
  #   networks:
  #     - 4notes-network
